// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/fileutil.go

// Package mock is a generated GoMock package.
package mock

import (
	template "html/template"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileUtil is a mock of FileUtil interface.
type MockFileUtil struct {
	ctrl     *gomock.Controller
	recorder *MockFileUtilMockRecorder
}

// MockFileUtilMockRecorder is the mock recorder for MockFileUtil.
type MockFileUtilMockRecorder struct {
	mock *MockFileUtil
}

// NewMockFileUtil creates a new mock instance.
func NewMockFileUtil(ctrl *gomock.Controller) *MockFileUtil {
	mock := &MockFileUtil{ctrl: ctrl}
	mock.recorder = &MockFileUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUtil) EXPECT() *MockFileUtilMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockFileUtil) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileUtilMockRecorder) ReadFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileUtil)(nil).ReadFile), filename)
}

// ReadTemplate mocks base method.
func (m *MockFileUtil) ReadTemplate(filename string) (*template.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemplate", filename)
	ret0, _ := ret[0].(*template.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemplate indicates an expected call of ReadTemplate.
func (mr *MockFileUtilMockRecorder) ReadTemplate(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemplate", reflect.TypeOf((*MockFileUtil)(nil).ReadTemplate), filename)
}
