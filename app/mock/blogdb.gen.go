// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/blogdb.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/worbridg/miniblog/domain"
)

// MockBlogDB is a mock of BlogDB interface.
type MockBlogDB struct {
	ctrl     *gomock.Controller
	recorder *MockBlogDBMockRecorder
}

// MockBlogDBMockRecorder is the mock recorder for MockBlogDB.
type MockBlogDBMockRecorder struct {
	mock *MockBlogDB
}

// NewMockBlogDB creates a new mock instance.
func NewMockBlogDB(ctrl *gomock.Controller) *MockBlogDB {
	mock := &MockBlogDB{ctrl: ctrl}
	mock.recorder = &MockBlogDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogDB) EXPECT() *MockBlogDBMockRecorder {
	return m.recorder
}

// Blogs mocks base method.
func (m *MockBlogDB) Blogs() map[int]domain.Blog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blogs")
	ret0, _ := ret[0].(map[int]domain.Blog)
	return ret0
}

// Blogs indicates an expected call of Blogs.
func (mr *MockBlogDBMockRecorder) Blogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blogs", reflect.TypeOf((*MockBlogDB)(nil).Blogs))
}

// Exist mocks base method.
func (m *MockBlogDB) Exist(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockBlogDBMockRecorder) Exist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockBlogDB)(nil).Exist), id)
}

// Get mocks base method.
func (m *MockBlogDB) Get(id int) (domain.Blog, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Blog)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlogDBMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlogDB)(nil).Get), id)
}

// ID mocks base method.
func (m *MockBlogDB) ID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockBlogDBMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBlogDB)(nil).ID))
}

// Store mocks base method.
func (m *MockBlogDB) Store(blog domain.Blog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", blog)
}

// Store indicates an expected call of Store.
func (mr *MockBlogDBMockRecorder) Store(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockBlogDB)(nil).Store), blog)
}

// Update mocks base method.
func (m *MockBlogDB) Update(id int, blog domain.Blog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", id, blog)
}

// Update indicates an expected call of Update.
func (mr *MockBlogDBMockRecorder) Update(id, blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlogDB)(nil).Update), id, blog)
}
